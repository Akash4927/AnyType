{{/*- 
{{.DotDot ""			"[]byte"	}}
{{.DotDot "Byte"		"byte"		}}
{{.DotDot "Buffer"		"bytes.Buffer"	}}
{{.DotDot "Reader"		"bytes.Reader"	}}
{{.DotDot "ByteReader"		"io.ByteReader"		}}
{{.DotDot "ByteScanner"		"io.ByteScanner"	}}
{{.DotDot "ByteWriter"		"io.ByteWriter"		}}
{{range .Range}}
	{{.DotDot ":Package:" "IsByte"}}
{{end}}
{{with .G "Buffer"   }}
	{{with .G ":Import:"   }}
		{{.DotDot "bytes"	""	}}
	{{end}}
{{end}}
{{with .G "Reader"   }}
	{{with .G ":Import:"   }}
		{{.DotDot "bytes"	""	}}
	{{end}}
{{end}}
{{with .G "ByteReader"   }}
	{{with .G ":Import:"   }}
		{{.DotDot "io"	""	}}
	{{end}}
{{end}}
{{with .G "ByteScanner"   }}
	{{with .G ":Import:"   }}
		{{.DotDot "io"	""	}}
	{{end}}
{{end}}
{{with .G "ByteWriter"   }}
	{{with .G ":Import:"   }}
		{{.DotDot "io"	""	}}
	{{end}}
{{end}}
-*/}}
{{-  template "Copy"			. }}
{{-  template "Package"			. }}
{{-  template "Edit"			. }}
/* Quote from "The Go Programming Language" Chapter 3 - page 52:
The type rune is a synonym for int32 and conventionally indicates that a value is a Unicode code point. The two names may be used interchangeably.

Similarly, the type byte is a synonym for uint8, and emphasizes that the value is a piece of raw data rather than a small numeric quantity.

Finally, there is an unsigned integer type uintptr, whose width is not specified but is sufficient to hold all the bits of a pointer value.
The uintptr type is used only for low-level programming, such as at the boundary of a Go program with a C library or an operating system.
*/
